	DATA STRUCTURE-Data structure introduction refers to a scheme for organizing data, or in other words a data structure is an arrangement of data in computer's memory in such a way that it could make the data quickly available to the processor for required calculations.

Classification of Data Structures-
Data structures can be broadly classified in two categories - linear structures and hierarchical structures. Arrays, linked lists, stacks, and queues are linear structures, while trees, graphs, heaps etc. are hierarchical structures.

>Arrays
>Linked List
>Stack
>Queue
>Tree
>Heap
>Graph

ARRAY->
Array is used to store multiple values of a variables using same data type.It is the most common data structure.Java implements arrays as objects and give the programmer a way to alter the size of them at run time. Arrays are the most common data structure used to store data.

LINKED LIST->
Linked list data structure provides better memory management than arrays. Because linked list is allocated memory at run time, so, there is no waste of memory. Performance wise linked list is slower than array because there is no direct access to linked list elements.
Linked list is proved to be a useful data structure when the number of elements to be stored is not known ahead of time.
There are many flavors of linked list you will see: linear, circular, doubly, and doubly circular.

STACK->
Stack is a last-in-first-out strategy data structure; this means that the element stored in last will be removed first.Operations in stack is only performed by TOS (top of stack)'

QUEUE->
Queue is a first-in-first-out data structure. The element that is added to the queue data structure first, will be removed from the queue first. Dequeue, priority queue, and circular queue are the variants of queue data structure. 
Queue has the following application uses:

	Access to shared resources (e.g., printer)
	Multiprogramming
	Message queue

TREE->
Tree is a hierarchical data structure. The very top element of a tree is called the root of the tree. Except the root element every element in a tree has a parent element, and zero or more children elements. All elements in the left sub-tree come before the root in sorting order, and all those in the right sub-tree come after the root.Tree is the most useful data structure when you have hierarchical information to store.

HEAP->
Heap is a binary tree that stores a collection of keys by satisfying heap property.
 Max heap and min heap are two flavors of heap data structure. The heap property for max heap is: each node should be greater than or equal to each of its children. While, for min heap it is: each node should be smaller than or equal to each of its children. Heap data structure is usually used to implement priority queues.

GRAPH->
Graph is a networked data structure that connects a collection of nodes called vertices, by connections, called edges. An edge can be seen as a path or communication link between two nodes. These edges can be either directed or undirected. If a path is directed then you can move in one direction only, while in an undirected path the movement is possible in both directions.